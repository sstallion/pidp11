

# call with MAKE_TARGET_ARCH=X86 or =BEAGLEBONE


#
# CC Command
#

# own settings
OS_CCDEFS = 
ifeq ($(MAKE_CONFIGURATION),RELEASE)
CC_DBG_FLAGS = -O2 -Wno-unused-result
else
CC_DBG_FLAGS = -ggdb3 -O0
endif

ifeq ($(MAKE_TARGET_ARCH),BBW)
	#### !!! when cross compiling !!!!
	# fuer beaglebone und angstrom stand alone toolchain
	CC=$(BBW_CC) -std=c99 -U__STRICT_ANSI__ $(CC_DBG_FLAGS) -I.
	OBJDIR=bin-bbw
	SSHTARGET=root@beaglebone
	LDFLAGS=-lrt -pthread
else ifeq ($(MAKE_TARGET_ARCH),BBB)
	CC=$(BBB_CC) -std=c99 -U__STRICT_ANSI__ $(CC_DBG_FLAGS) -I.
	OBJDIR=bin-bbb
	SSHTARGET=root@beaglebone
	LDFLAGS=-lrt -pthread
else ifeq ($(MAKE_TARGET_ARCH),RPI)
	CC=arm-linux-gnueabihf-gcc -std=c99 -U__STRICT_ANSI__ $(CC_DBG_FLAGS)  -I.
	OBJDIR=bin-rpi
	SSHTARGET=pi@raspberrypi
	LDFLAGS=-lrt -pthread
else ifeq ($(MAKE_TARGET_ARCH),X86)
    OS_CCDEFS = -m32
	OBJDIR=bin-ubuntu-x86
	LDFLAGS=-pthread
else ifeq ($(MAKE_TARGET_ARCH),X64)
    OS_CCDEFS = -m64
    OBJDIR=bin-ubuntu-x64
	LDFLAGS=-pthread
else
	$error("MAKE_TARGET_ARCH not set!")
endif


CCDEFS= \
	-DBLINKENLIGHT_SERVER	\
	-I.	\
	-I$(BLINKENLIGHT_COMMON_DIR)	\
	-I$(BLINKENLIGHT_API_DIR)	\
	-I$(BLINKENLIGHT_API_DIR)/rpcgen_linux	\
	-I$(LIBANTLR3C_DIR) -I$(LIBANTLR3C_DIR)/include \
	-I$(ANTLR_OUTDIR) 	\
	$(CC_DBG_FLAGS) $(OS_CCDEFS)


#########################################################
# sub dir for the API. is same level (= sibling) as server and client
BLINKENLIGHT_COMMON_DIR=../00_common
BLINKENLIGHT_API_DIR=../07.0_blinkenlight_api
# *_svc, *_xdr and api.h sources must be created with rpcgen
BLINKENLIGHT_API_SOURCES.c = \
	$(BLINKENLIGHT_API_DIR)/blinkenlight_panels.c	\
	$(BLINKENLIGHT_API_DIR)/blinkenlight_api_server_procs.c \
	$(BLINKENLIGHT_API_DIR)/rpcgen_linux/rpc_blinkenlight_api_svc.c \
	$(BLINKENLIGHT_API_DIR)/rpcgen_linux/rpc_blinkenlight_api_xdr.c	\
	$(BLINKENLIGHT_API_DIR)/historybuffer.c	\
	$(BLINKENLIGHT_COMMON_DIR)/bitcalc.c	\
	$(BLINKENLIGHT_COMMON_DIR)/getopt2.c	\
	$(BLINKENLIGHT_COMMON_DIR)/radix.c	\
	$(BLINKENLIGHT_COMMON_DIR)/namevaluelist.c	\
	$(BLINKENLIGHT_COMMON_DIR)/mcout.c	\
	$(BLINKENLIGHT_COMMON_DIR)/errno2txt.c

BLINKENLIGHT_API_SOURCES.h = \
	$(BLINKENLIGHT_API_DIR)/rpcgen_linux/rpc_blinkenlight_api.h	\
	$(BLINKENLIGHT_API_DIR)/historybuffer.h	\
	$(BLINKENLIGHT_API_DIR)/blinkenlight_api_server_procs.h \
	$(BLINKENLIGHT_COMMON_DIR)/bitcalc.h	\
	$(BLINKENLIGHT_COMMON_DIR)/getopt2.h	\
	$(BLINKENLIGHT_COMMON_DIR)/radix.h	\
	$(BLINKENLIGHT_COMMON_DIR)/namevaluelist.h	\
	$(BLINKENLIGHT_COMMON_DIR)/mcout.h	\
	$(BLINKENLIGHT_COMMON_DIR)/errno2txt.h

$(BLINKENLIGHT_API_SOURCES.c) $(BLINKENLIGHT_API_SOURCES.h):
	# rpcgen
	make --directory=$(BLINKENLIGHT_API_DIR)/rpcgen_linux sources

#########################################################
# ANTLR / config file grammar
# subdir, where the grammar-sources and tests are located
# GRAMMAR_DIR=./panel_config_grammar

# parser and lexer for config file are generated by ANTLRWorks
LIBANTLR3C_DIR=../3rdparty/libantlr3c-3.1.4-SNAPSHOT
# where ANTLR puts its generated  C sources
ANTLR_OUTDIR=./panel_config_grammar/output

# No ANTLR lib (to execute lexer/parser) is used, because we compile for x86 and ARM,
# list used source files instead.
ANTLR_SOURCES.c = \
	$(LIBANTLR3C_DIR)/src/antlr3lexer.c \
	$(LIBANTLR3C_DIR)/src/antlr3baserecognizer.c	\
	$(LIBANTLR3C_DIR)/src/antlr3collections.c	\
	$(LIBANTLR3C_DIR)/src/antlr3exception.c	\
	$(LIBANTLR3C_DIR)/src/antlr3bitset.c	\
	$(LIBANTLR3C_DIR)/src/antlr3commontoken.c	\
	$(LIBANTLR3C_DIR)/src/antlr3string.c	\
	$(LIBANTLR3C_DIR)/src/antlr3convertutf.c	\
	$(LIBANTLR3C_DIR)/src/antlr3intstream.c	\
	$(LIBANTLR3C_DIR)/src/antlr3inputstream.c	\
	$(LIBANTLR3C_DIR)/src/antlr3filestream.c	\
	$(LIBANTLR3C_DIR)/src/antlr3tokenstream.c	\
	$(LIBANTLR3C_DIR)/src/antlr3parser.c

#########################################################

SOURCES.h = \
	main.h	\
	print.h	\
	$(BLINKENLIGHT_COMMON_DIR)/kbhit.h	\
	$(BLINKENLIGHT_API_DIR)/blinkenlight_panels.h	\
	config.h	\
	$(BLINKENLIGHT_API_DIR)/blinkenlight_api_server_procs.h \
	iopattern.h \
	blinkenbus.h \
	panelsim.h \
	$(ANTLR_OUTDIR)/blinkenlight_panel_configLexer.h	\
	$(ANTLR_OUTDIR)/blinkenlight_panel_configParser.h
SOURCES.c = \
	main.c	\
	config.c	\
	iopattern.c \
	blinkenbus.c \
	panelsim.c \
	print.c	\
	$(BLINKENLIGHT_COMMON_DIR)/kbhit.c	\
	$(BLINKENLIGHT_API_SOURCES.c) \
 	$(ANTLR_SOURCES.c) \
	$(ANTLR_OUTDIR)/blinkenlight_panel_configLexer.c  \
	$(ANTLR_OUTDIR)/blinkenlight_panel_configParser.c


OBJECTS = $(SOURCES.c:%.c=%.o)

# assembly listings, see http://www.delorie.com/djgpp/v2faq/faq8_20.html
# always with symbol info (-ggdb), without link stage (-c)
%.lst:	%.c
	${CC} $(CCDEFS) -ggdb3 -c -Wa,-a,-ad  $^ >$@ 
	rm -f a.out *.o ; mkdir -p $(OBJDIR) ; mv $@ $(OBJDIR)


#
# Build everything
#
all:    blinkenlightd

clean:
	rm -f a.out core blinkenlightd $(OBJECTS) $(OBJDIR)/*.lst $(OBJDIR)/blinkenlightd
	make --directory=$(BLINKENLIGHT_API_DIR)/rpcgen_linux clean

install:
	echo "copy server to beaglebone/rpi ... call only for ARM server!"
ifneq ($(MAKE_TARGET_ARCH),RPI)
	echo --- set remote time
	ssh $(SSHTARGET) "date -u `date -u +%m%d%H%M%Y.%S`; echo `cat /etc/timezone` > /etc/timezone"
endif
	echo copy module ...
	scp $(OBJDIR)/blinkenlightd $(SSHTARGET):


blinkenlightd:	$(SOURCES.c) $(SOURCES.h)
	${CC} $^ -o $@ $(CCDEFS) ${LDFLAGS} >$@.lst
	mkdir -p $(OBJDIR)
	mv $@ $(OBJDIR)
	# Verify: was it x86 or ARM?
	file $(OBJDIR)/$@

