/** \file
 *  This C header file was generated by $ANTLR version 3.5.1
 *
 *     -  From the grammar source file : /home/joerg/retrocmp/blinkenbone/projects/07.1_blinkenlight_server/panel_config_grammar/blinkenlight_panel_config.g
 *     -                            On : 2016-03-26 09:26:02
 *     -                 for the lexer : blinkenlight_panel_configLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
blinkenlight_panel_configLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pblinkenlight_panel_configLexer, which is returned from a call to blinkenlight_panel_configLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pblinkenlight_panel_configLexer are  as follows:
 *
 *  - 
 void
      pblinkenlight_panel_configLexer->T__74(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->T__75(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->T__76(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->T__77(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->T__78(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->T__79(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->T__80(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->PANEL(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->CONTROL(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->NAME(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->INFO(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->RADIX(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->TYPE(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->TYPE_SWITCH(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->TYPE_LAMP(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->TYPE_KNOB(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->TYPE_POINTER(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->TYPE_OTHERINPUT(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->TYPE_OTHEROUTPUT(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->ENCODING(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->ENCODING_BINARY(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->ENCODING_BITPOSITION(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->DEFAULT(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->BITS_MIRRORED(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->FMAX(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->BITLEN(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->BLINKENBUS_WIRING(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->REGISTER_WIRING(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->VALUE_BIT_OFFSET(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->LEVELS(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->ACTIVE_HIGH(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->ACTIVE_LOW(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->BOARD(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->REGISTER(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN0(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN1(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN2(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN3(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN4(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN5(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN6(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN7(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN8(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN9(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN10(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN11(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN12(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN13(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IN14(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT0(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT1(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT2(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT3(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT4(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT5(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT6(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT7(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT8(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT9(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT10(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT11(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT12(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT13(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OUT14(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->BITS(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->DIGITS(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OCTAL_DIGITS(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->HEX_DIGITS(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->IDENTIFIER(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->COMMENT(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->WS(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->STRING(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->CHAR(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->HEX_DIGIT(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->ESC_SEQ(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->OCTAL_ESC(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->UNICODE_ESC(pblinkenlight_panel_configLexer)
 *  - 
 void
      pblinkenlight_panel_configLexer->Tokens(pblinkenlight_panel_configLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_blinkenlight_panel_configLexer_H
#define _blinkenlight_panel_configLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct blinkenlight_panel_configLexer_Ctx_struct blinkenlight_panel_configLexer, * pblinkenlight_panel_configLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
blinkenlight_panel_configLexer

 */
struct blinkenlight_panel_configLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__74)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mPANEL)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mCONTROL)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mNAME)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mINFO)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mRADIX)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTYPE)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTYPE_SWITCH)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTYPE_LAMP)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTYPE_KNOB)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTYPE_POINTER)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTYPE_OTHERINPUT)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTYPE_OTHEROUTPUT)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mENCODING)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mENCODING_BINARY)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mENCODING_BITPOSITION)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mDEFAULT)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mBITS_MIRRORED)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mFMAX)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mBITLEN)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mBLINKENBUS_WIRING)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mREGISTER_WIRING)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mVALUE_BIT_OFFSET)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mLEVELS)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mACTIVE_HIGH)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mACTIVE_LOW)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mBOARD)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mREGISTER)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN0)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN1)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN2)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN3)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN4)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN5)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN6)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN7)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN8)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN9)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN10)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN11)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN12)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN13)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIN14)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT0)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT1)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT2)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT3)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT4)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT5)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT6)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT7)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT8)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT9)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT10)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT11)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT12)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT13)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOUT14)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mBITS)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mDIGITS)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_DIGITS)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGITS)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct blinkenlight_panel_configLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct blinkenlight_panel_configLexer_Ctx_struct * ctx);
    void	    (*free)   (struct blinkenlight_panel_configLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pblinkenlight_panel_configLexer blinkenlight_panel_configLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pblinkenlight_panel_configLexer blinkenlight_panel_configLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define ACTIVE_HIGH      4
#define ACTIVE_LOW      5
#define BITLEN      6
#define BITS      7
#define BITS_MIRRORED      8
#define BLINKENBUS_WIRING      9
#define BOARD      10
#define CHAR      11
#define COMMENT      12
#define CONTROL      13
#define DEFAULT      14
#define DIGITS      15
#define ENCODING      16
#define ENCODING_BINARY      17
#define ENCODING_BITPOSITION      18
#define ESC_SEQ      19
#define FMAX      20
#define HEX_DIGIT      21
#define HEX_DIGITS      22
#define IDENTIFIER      23
#define IN0      24
#define IN1      25
#define IN10      26
#define IN11      27
#define IN12      28
#define IN13      29
#define IN14      30
#define IN2      31
#define IN3      32
#define IN4      33
#define IN5      34
#define IN6      35
#define IN7      36
#define IN8      37
#define IN9      38
#define INFO      39
#define LEVELS      40
#define NAME      41
#define OCTAL_DIGITS      42
#define OCTAL_ESC      43
#define OUT0      44
#define OUT1      45
#define OUT10      46
#define OUT11      47
#define OUT12      48
#define OUT13      49
#define OUT14      50
#define OUT2      51
#define OUT3      52
#define OUT4      53
#define OUT5      54
#define OUT6      55
#define OUT7      56
#define OUT8      57
#define OUT9      58
#define PANEL      59
#define RADIX      60
#define REGISTER      61
#define REGISTER_WIRING      62
#define STRING      63
#define TYPE      64
#define TYPE_KNOB      65
#define TYPE_LAMP      66
#define TYPE_OTHERINPUT      67
#define TYPE_OTHEROUTPUT      68
#define TYPE_POINTER      69
#define TYPE_SWITCH      70
#define UNICODE_ESC      71
#define VALUE_BIT_OFFSET      72
#define WS      73
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for blinkenlight_panel_configLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
